"""
QtForge Managers Module Type Stubs

Type definitions for the qtforge.managers submodule.
Contains manager classes for configuration, logging, resources, and versioning.
"""

from typing import Any, Dict, List, Optional, Union
from enum import Enum
import datetime
from pathlib import Path

# Enums
class ConfigurationScope(Enum):
    Global = ...
    Plugin = ...
    User = ...
    Session = ...
    Runtime = ...

class ConfigurationChangeType(Enum):
    Added = ...
    Modified = ...
    Removed = ...
    Reloaded = ...

class LogLevel(Enum):
    Debug = ...
    Info = ...
    Warning = ...
    Error = ...
    Critical = ...

# Configuration Classes
class ConfigurationValidationResult:
    """Configuration validation result."""
    is_valid: bool
    errors: List[str]
    warnings: List[str]
    def __bool__(self) -> bool: ...

class ConfigurationChangeEvent:
    """Configuration change event."""
    type: ConfigurationChangeType
    key: str
    old_value: Any
    new_value: Any
    scope: ConfigurationScope
    plugin_id: str
    timestamp: datetime.datetime

class ConfigurationSchema:
    """Configuration schema for validation."""
    schema: Dict[str, Any]
    strict_mode: bool
    def __init__(self, schema: Optional[Dict[str, Any]] = None, strict: bool = False) -> None: ...

class IConfigurationManager:
    """Configuration manager interface."""
    def get_value(self, key: str, scope: ConfigurationScope = ConfigurationScope.Global, plugin_id: str = "") -> Any: ...
    def get_value_or_default(self, key: str, default_value: Any, scope: ConfigurationScope = ConfigurationScope.Global, plugin_id: str = "") -> Any: ...
    def set_value(self, key: str, value: Any, scope: ConfigurationScope = ConfigurationScope.Global, plugin_id: str = "") -> bool: ...
    def remove_key(self, key: str, scope: ConfigurationScope = ConfigurationScope.Global, plugin_id: str = "") -> bool: ...
    def has_key(self, key: str, scope: ConfigurationScope = ConfigurationScope.Global, plugin_id: str = "") -> bool: ...
    def get_configuration(self, scope: ConfigurationScope = ConfigurationScope.Global, plugin_id: str = "") -> Dict[str, Any]: ...
    def set_configuration(self, configuration: Dict[str, Any], scope: ConfigurationScope = ConfigurationScope.Global, plugin_id: str = "", merge: bool = True) -> bool: ...

class ConfigurationManager(IConfigurationManager):
    """Configuration manager implementation."""
    def __init__(self) -> None: ...
    @staticmethod
    def create() -> 'ConfigurationManager': ...

# Logging Classes
class ILoggingManager:
    """Logging manager interface."""
    def log(self, level: LogLevel, message: str, plugin_id: str = "") -> None: ...
    def debug(self, message: str, plugin_id: str = "") -> None: ...
    def info(self, message: str, plugin_id: str = "") -> None: ...
    def warning(self, message: str, plugin_id: str = "") -> None: ...
    def error(self, message: str, plugin_id: str = "") -> None: ...
    def critical(self, message: str, plugin_id: str = "") -> None: ...
    def set_log_level(self, level: LogLevel) -> None: ...
    def get_log_level(self) -> LogLevel: ...
    def enable_file_logging(self, file_path: str) -> bool: ...
    def disable_file_logging(self) -> None: ...
    def is_file_logging_enabled(self) -> bool: ...
    def get_log_file_path(self) -> str: ...
    def flush(self) -> None: ...

class LoggingManager(ILoggingManager):
    """Logging manager implementation."""
    def __init__(self) -> None: ...
    @staticmethod
    def create() -> 'LoggingManager': ...

# Resource Management Classes
class IResourceManager:
    """Resource manager interface."""
    def allocate_resource(self, resource_id: str, resource_type: str, config: Dict[str, Any]) -> bool: ...
    def deallocate_resource(self, resource_id: str) -> bool: ...
    def get_resource(self, resource_id: str) -> Any: ...
    def has_resource(self, resource_id: str) -> bool: ...
    def list_resources(self) -> List[str]: ...
    def get_resource_info(self, resource_id: str) -> Dict[str, Any]: ...
    def get_statistics(self) -> Dict[str, Any]: ...
    def cleanup(self) -> None: ...

class ResourceManager(IResourceManager):
    """Resource manager implementation."""
    def __init__(self) -> None: ...
    @staticmethod
    def create() -> 'ResourceManager': ...

# Version Management Classes
class IPluginVersionManager:
    """Plugin version manager interface."""
    def install_version(self, plugin_id: str, version: str, file_path: Path, replace_existing: bool = False) -> bool: ...
    def uninstall_version(self, plugin_id: str, version: str, force: bool = False) -> bool: ...
    def get_installed_versions(self, plugin_id: str) -> List[str]: ...
    def get_active_version(self, plugin_id: str) -> Optional[str]: ...
    def set_active_version(self, plugin_id: str, version: str) -> bool: ...
    def get_version_info(self, plugin_id: str, version: str) -> Dict[str, Any]: ...
    def is_version_compatible(self, plugin_id: str, version: str) -> bool: ...
    def migrate_version(self, plugin_id: str, from_version: str, to_version: str) -> bool: ...
    def rollback_version(self, plugin_id: str) -> bool: ...
    def cleanup_old_versions(self, plugin_id: str, keep_count: int = 3) -> bool: ...
    def get_migration_path(self, plugin_id: str, from_version: str, to_version: str) -> List[str]: ...
    def validate_version_integrity(self, plugin_id: str, version: str) -> bool: ...
    def export_version(self, plugin_id: str, version: str, output_path: Path) -> bool: ...
    def import_version(self, archive_path: Path, verify_signature: bool = True) -> bool: ...

class PluginVersionManager(IPluginVersionManager):
    """Plugin version manager implementation."""
    def __init__(self, registry: Any, config_manager: Any, logger: Any, parent: Optional[Any] = None) -> None: ...

# Factory Functions
def create_configuration_manager() -> ConfigurationManager:
    """Create a new ConfigurationManager instance."""
    ...

def create_logging_manager() -> LoggingManager:
    """Create a new LoggingManager instance."""
    ...

def create_resource_manager() -> ResourceManager:
    """Create a new ResourceManager instance."""
    ...

def create_plugin_version_manager(registry: Any, config_manager: Any, logger: Any) -> PluginVersionManager:
    """Create a new PluginVersionManager instance."""
    ...
