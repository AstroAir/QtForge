"""
QtForge Orchestration Module Type Stubs

This module provides plugin orchestration and workflow management functionality.
"""

from typing import Dict, List, Any, Optional, Callable
from enum import Enum
from .core import IPlugin

class WorkflowState(Enum):
    """Workflow execution state enumeration."""
    Idle = ...
    Running = ...
    Paused = ...
    Completed = ...
    Failed = ...
    Cancelled = ...

class ExecutionMode(Enum):
    """Plugin execution mode enumeration."""
    Sequential = ...
    Parallel = ...
    Conditional = ...
    Pipeline = ...

class WorkflowStep:
    """Represents a single step in a workflow."""
    step_id: str
    plugin_id: str
    method_name: str
    parameters: Dict[str, Any]
    dependencies: List[str]
    
    def __init__(self, step_id: str, plugin_id: str, method_name: str) -> None: ...

class Workflow:
    """Represents a plugin workflow."""
    workflow_id: str
    name: str
    description: str
    steps: List[WorkflowStep]
    execution_mode: ExecutionMode
    
    def __init__(self, workflow_id: str, name: str) -> None: ...
    def add_step(self, step: WorkflowStep) -> None: ...
    def remove_step(self, step_id: str) -> bool: ...
    def get_step(self, step_id: str) -> Optional[WorkflowStep]: ...

class PluginOrchestrator:
    """Plugin orchestration manager."""
    def __init__(self) -> None: ...
    
    def register_workflow(self, workflow: Workflow) -> bool: ...
    def unregister_workflow(self, workflow_id: str) -> bool: ...
    def execute_workflow(self, workflow_id: str, parameters: Dict[str, Any] = {}) -> bool: ...
    def pause_workflow(self, workflow_id: str) -> bool: ...
    def resume_workflow(self, workflow_id: str) -> bool: ...
    def cancel_workflow(self, workflow_id: str) -> bool: ...
    def get_workflow_state(self, workflow_id: str) -> Optional[WorkflowState]: ...
    def get_workflow_result(self, workflow_id: str) -> Optional[Dict[str, Any]]: ...
    def list_workflows(self) -> List[str]: ...
    def get_workflow(self, workflow_id: str) -> Optional[Workflow]: ...

# Utility functions
def create_orchestrator() -> PluginOrchestrator: ...
def create_workflow(workflow_id: str, name: str, steps: List[WorkflowStep] = []) -> Workflow: ...
def create_step(step_id: str, plugin_id: str, method_name: str, 
               parameters: Dict[str, Any] = {}) -> WorkflowStep: ...
