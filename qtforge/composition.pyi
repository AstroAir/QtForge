"""
QtForge Composition Module Type Stubs

This module provides plugin composition and aggregation functionality.
"""

from typing import Dict, List, Any, Optional
from enum import Enum
from .core import IPlugin

class CompositionStrategy(Enum):
    """Plugin composition strategy enumeration."""
    Aggregation = ...
    Pipeline = ...
    Facade = ...
    Decorator = ...
    Proxy = ...
    Adapter = ...
    Bridge = ...

class PluginRole(Enum):
    """Plugin role in composition enumeration."""
    Primary = ...
    Secondary = ...
    Auxiliary = ...
    Decorator = ...
    Adapter = ...
    Bridge = ...

class PluginComposition:
    """Represents a plugin composition."""
    composition_id: str
    strategy: CompositionStrategy
    plugins: List[str]
    metadata: Dict[str, Any]
    
    def __init__(self, composition_id: str, strategy: CompositionStrategy) -> None: ...

class CompositePlugin(IPlugin):
    """A composite plugin that aggregates multiple plugins."""
    def __init__(self, composition_id: str, strategy: CompositionStrategy) -> None: ...
    def add_plugin(self, plugin_id: str, role: PluginRole = PluginRole.Secondary) -> bool: ...
    def remove_plugin(self, plugin_id: str) -> bool: ...
    def get_plugins(self) -> List[str]: ...
    def get_plugin_role(self, plugin_id: str) -> Optional[PluginRole]: ...

class CompositionManager:
    """Plugin composition manager (singleton)."""
    @staticmethod
    def instance() -> 'CompositionManager': ...
    
    def register_composition(self, composition: PluginComposition) -> bool: ...
    def unregister_composition(self, composition_id: str) -> bool: ...
    def get_composition(self, composition_id: str) -> Optional[PluginComposition]: ...
    def list_compositions(self) -> List[str]: ...
    def create_composite_plugin(self, composition_id: str, strategy: CompositionStrategy) -> Optional[CompositePlugin]: ...
    def destroy_composite_plugin(self, composition_id: str) -> bool: ...
    def list_composite_plugins(self) -> List[str]: ...
    def get_composite_plugin(self, composition_id: str) -> Optional[CompositePlugin]: ...

# Utility functions
def get_composition_manager() -> CompositionManager: ...
def create_composition(composition_id: str, strategy: CompositionStrategy, 
                      plugins: List[str]) -> PluginComposition: ...
