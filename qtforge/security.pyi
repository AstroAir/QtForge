"""
QtForge Security Module Type Stubs

Type definitions for the qtforge.security submodule.
Contains security management and validation functionality.
"""

from typing import Any, Dict, List, Optional, Union
from enum import Enum
from pathlib import Path

# Enums
class SecurityLevel(Enum):
    None_ = ...
    Basic = ...
    Standard = ...
    High = ...
    Maximum = ...

class PluginPermission(Enum):
    FileSystemRead = ...
    FileSystemWrite = ...
    NetworkAccess = ...
    RegistryAccess = ...
    ProcessCreation = ...
    SystemInfo = ...
    HardwareAccess = ...
    DatabaseAccess = ...

class TrustLevel(Enum):
    Untrusted = ...
    Limited = ...
    Trusted = ...
    FullyTrusted = ...

# Security Classes
class ValidationResult:
    """Security validation result."""
    is_valid: bool
    error_message: str
    warnings: List[str]
    security_level: SecurityLevel

class SecurityManager:
    """Central security management system."""
    def __init__(self) -> None: ...
    @staticmethod
    def create() -> 'SecurityManager': ...
    def validate_plugin(self, plugin_path: str) -> ValidationResult: ...
    def set_security_level(self, level: SecurityLevel) -> None: ...
    def get_security_level(self) -> SecurityLevel: ...
    def is_plugin_trusted(self, plugin_id: str) -> bool: ...
    def add_trusted_plugin(self, plugin_id: str) -> None: ...
    def remove_trusted_plugin(self, plugin_id: str) -> None: ...
    def get_trusted_plugins(self) -> List[str]: ...
    def clear_trusted_plugins(self) -> None: ...
    def enable_signature_verification(self, enabled: bool) -> None: ...
    def is_signature_verification_enabled(self) -> bool: ...
    def get_statistics(self) -> Dict[str, Any]: ...

class SecurityValidator:
    """Security validation component."""
    def __init__(self) -> None: ...
    def validate_file_integrity(self, file_path: str) -> ValidationResult: ...
    def validate_plugin_metadata(self, metadata: Dict[str, Any]) -> ValidationResult: ...
    def validate_plugin_dependencies(self, plugin_id: str, dependencies: List[str]) -> ValidationResult: ...
    def validate_plugin_permissions(self, plugin_id: str, permissions: List[str]) -> ValidationResult: ...
    def set_validation_rules(self, rules: Dict[str, Any]) -> None: ...
    def get_validation_rules(self) -> Dict[str, Any]: ...

class SignatureVerifier:
    """Digital signature verification component."""
    def __init__(self) -> None: ...
    def verify_plugin_signature(self, plugin_path: str) -> ValidationResult: ...
    def add_trusted_certificate(self, certificate_path: str) -> bool: ...
    def remove_trusted_certificate(self, certificate_id: str) -> bool: ...
    def get_trusted_certificates(self) -> List[str]: ...
    def clear_trusted_certificates(self) -> None: ...
    def set_signature_algorithm(self, algorithm: str) -> None: ...
    def get_signature_algorithm(self) -> str: ...

class PermissionManager:
    """Plugin permission management component."""
    def __init__(self) -> None: ...
    def grant_permission(self, plugin_id: str, permission: str) -> bool: ...
    def revoke_permission(self, plugin_id: str, permission: str) -> bool: ...
    def has_permission(self, plugin_id: str, permission: str) -> bool: ...
    def get_plugin_permissions(self, plugin_id: str) -> List[str]: ...
    def set_plugin_permissions(self, plugin_id: str, permissions: List[str]) -> None: ...
    def get_all_permissions(self) -> List[str]: ...
    def clear_plugin_permissions(self, plugin_id: str) -> None: ...
    def set_default_permissions(self, permissions: List[str]) -> None: ...
    def get_default_permissions(self) -> List[str]: ...

class SecurityPolicyEngine:
    """Security policy evaluation engine."""
    def __init__(self) -> None: ...
    def evaluate_policy(self, plugin_id: str, context: Dict[str, Any]) -> ValidationResult: ...
    def add_policy_rule(self, rule_id: str, rule: str) -> bool: ...
    def remove_policy_rule(self, rule_id: str) -> bool: ...
    def get_policy_rules(self) -> Dict[str, str]: ...
    def clear_policy_rules(self) -> None: ...
    def set_policy_mode(self, mode: str) -> None: ...
    def get_policy_mode(self) -> str: ...
    def validate_policy_syntax(self, policy: str) -> ValidationResult: ...

# Factory Functions
def create_security_manager() -> SecurityManager:
    """Create a new SecurityManager instance."""
    ...

def create_security_validator() -> SecurityValidator:
    """Create a new SecurityValidator instance."""
    ...

def create_signature_verifier() -> SignatureVerifier:
    """Create a new SignatureVerifier instance."""
    ...

def create_permission_manager() -> PermissionManager:
    """Create a new PermissionManager instance."""
    ...

def create_security_policy_engine() -> SecurityPolicyEngine:
    """Create a new SecurityPolicyEngine instance."""
    ...
