"""
QtForge Communication Module Type Stubs

Type definitions for the qtforge.communication submodule.
Contains inter-plugin communication and messaging functionality.
"""

from typing import Any, Dict, List, Optional, Union, Callable
from enum import Enum
import datetime

# Enums
class DeliveryMode(Enum):
    Broadcast = ...
    Unicast = ...
    Multicast = ...

class MessagePriority(Enum):
    Low = ...
    Normal = ...
    High = ...
    Critical = ...

class ServiceCapability(Enum):
    None_ = ...
    Synchronous = ...
    Asynchronous = ...
    Streaming = ...
    Transactional = ...
    Cacheable = ...
    Idempotent = ...
    ThreadSafe = ...
    Stateful = ...
    Discoverable = ...
    Versioned = ...
    Authenticated = ...
    Encrypted = ...

# Communication Classes
class IMessage:
    """Base message interface."""
    def topic(self) -> str: ...
    def sender(self) -> str: ...
    def timestamp(self) -> datetime.datetime: ...
    def priority(self) -> MessagePriority: ...
    def data(self) -> Dict[str, Any]: ...
    def metadata(self) -> Dict[str, Any]: ...
    def to_json(self) -> Dict[str, Any]: ...

class BasicMessage(IMessage):
    """Basic message implementation."""
    def __init__(self, topic: str, sender: str, data: Dict[str, Any] = {}) -> None: ...
    def set_data(self, data: Dict[str, Any]) -> None: ...
    def set_metadata(self, metadata: Dict[str, Any]) -> None: ...
    def set_priority(self, priority: MessagePriority) -> None: ...

class Subscription:
    """Message subscription information."""
    subscriber_id: str
    message_type: str
    subscription_time: datetime.datetime

class IMessageBus:
    """Message bus interface."""
    def unsubscribe(self, subscriber_id: str, topic: str) -> bool: ...
    def subscribers(self, topic: str) -> List[str]: ...
    def subscriptions(self, subscriber_id: str) -> List[Subscription]: ...
    def has_subscriber(self, subscriber_id: str, topic: str) -> bool: ...
    def statistics(self) -> Dict[str, Any]: ...
    def clear(self) -> None: ...
    def set_logging_enabled(self, enabled: bool) -> None: ...
    def is_logging_enabled(self) -> bool: ...
    def message_log(self) -> List[Dict[str, Any]]: ...

class MessageBus(IMessageBus):
    """Message bus implementation."""
    def __init__(self) -> None: ...
    def publish_message(self, message: IMessage) -> bool: ...
    def publish_basic(self, topic: str, sender: str, data: Dict[str, Any]) -> bool: ...
    def subscribe_to_topic(self, subscriber_id: str, topic: str, callback: Callable[[IMessage], None]) -> bool: ...

# Service Contract Classes
class ServiceVersion:
    """Service version information."""
    major: int
    minor: int
    patch: int
    def __init__(self, major: int = 0, minor: int = 0, patch: int = 0) -> None: ...
    def to_string(self) -> str: ...
    def is_compatible_with(self, other: 'ServiceVersion') -> bool: ...

class ServiceMethodDescriptor:
    """Service method descriptor."""
    method_name: str
    description: str
    input_schema: Dict[str, Any]
    output_schema: Dict[str, Any]
    capabilities: ServiceCapability
    timeout_ms: int
    def to_json(self) -> Dict[str, Any]: ...
    @staticmethod
    def from_json(json_obj: Dict[str, Any]) -> 'ServiceMethodDescriptor': ...

class ServiceContract:
    """Service contract definition."""
    service_name: str
    version: ServiceVersion
    description: str
    methods: List[ServiceMethodDescriptor]
    dependencies: List[str]
    capabilities: ServiceCapability
    metadata: Dict[str, Any]
    def add_method(self, method: ServiceMethodDescriptor) -> None: ...
    def has_method(self, method_name: str) -> bool: ...
    def get_method(self, method_name: str) -> Optional[ServiceMethodDescriptor]: ...
    def is_compatible_with(self, other: 'ServiceContract') -> bool: ...
    def to_json(self) -> Dict[str, Any]: ...
    @staticmethod
    def from_json(json_obj: Dict[str, Any]) -> 'ServiceContract': ...

# Factory Functions
def create_message_bus() -> MessageBus: ...
def create_basic_message(topic: str, sender: str, data: Dict[str, Any] = {}) -> BasicMessage: ...
def create_service_contract(service_name: str, version: ServiceVersion) -> ServiceContract: ...
