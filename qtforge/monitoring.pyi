"""
QtForge Monitoring Module Type Stubs

This module provides monitoring and hot reload functionality for plugins.
"""

from typing import Dict, List, Any, Optional
from .core import IPlugin

class IPluginHotReloadManager:
    """Interface for plugin hot reload management."""
    def enable_hot_reload(self, plugin_id: str) -> bool: ...
    def disable_hot_reload(self, plugin_id: str) -> bool: ...
    def is_hot_reload_enabled(self, plugin_id: str) -> bool: ...
    def get_hot_reload_plugins(self) -> List[str]: ...
    def reload_plugin(self, plugin_id: str) -> bool: ...
    def set_reload_interval(self, interval_ms: int) -> None: ...
    def get_reload_interval(self) -> int: ...

class PluginHotReloadManager(IPluginHotReloadManager):
    """Plugin hot reload manager implementation."""
    def __init__(self, parent: Optional[Any] = None) -> None: ...

class IPluginMetricsCollector:
    """Interface for plugin metrics collection."""
    def start_monitoring(self) -> bool: ...
    def stop_monitoring(self) -> bool: ...
    def is_monitoring_active(self) -> bool: ...
    def clear_metrics(self) -> None: ...
    def set_monitoring_interval(self, interval_ms: int) -> None: ...
    def get_monitoring_interval(self) -> int: ...
    def get_plugin_metrics(self, plugin_id: str) -> Dict[str, Any]: ...
    def get_system_metrics(self) -> Dict[str, Any]: ...

class PluginMetricsCollector(IPluginMetricsCollector):
    """Plugin metrics collector implementation."""
    def __init__(self, parent: Optional[Any] = None) -> None: ...

# Factory functions
def create_hot_reload_manager() -> PluginHotReloadManager: ...
def create_metrics_collector() -> PluginMetricsCollector: ...
def setup_monitoring_system(metrics_interval: int = 5000) -> tuple[PluginHotReloadManager, PluginMetricsCollector]: ...
