"""
QtForge Python Bindings

A comprehensive, modern plugin system for Qt applications with full Python integration.

This package provides complete Python bindings for the QtForge C++ library, enabling
Python applications to leverage QtForge's advanced plugin management, inter-plugin
communication, security, orchestration, monitoring, and marketplace features.

Key Features:
- Complete plugin lifecycle management
- Inter-plugin communication system
- Advanced security and validation
- Plugin orchestration and workflows
- Hot reloading and monitoring
- Transaction management
- Plugin composition patterns
- Marketplace integration
- Multi-threaded plugin execution

Version: @PROJECT_VERSION@
Build: @CMAKE_BUILD_TYPE@
"""

from typing import Tuple, Optional, List, Dict, Any, Union

__version__ = "@PROJECT_VERSION@"
__version_info__: Tuple[int, int, int] = (@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@)
__build_type__ = "@CMAKE_BUILD_TYPE@"

# Import the compiled extension module
try:
    from .qtforge import *
    from . import qtforge as _qtforge_module

    # Re-export commonly used classes and functions
    __all__ = [
        # Core classes
        'PluginManager',
        'IPlugin',
        'PluginLoader',
        'PluginRegistry',
        'PluginMetadata',
        'PluginDependencyResolver',
        'IPluginDependencyResolver',
        'DependencyNode',
        'PluginLifecycleManager',
        'PluginLifecycleConfig',
        'PluginLifecycleEventData',
        'PluginHealthStatus',

        # Communication
        'MessageBus',

        # Security
        'SecurityManager',

        # Managers
        'ConfigurationManager',

        # Orchestration
        'PluginOrchestrator',
        'Workflow',
        'WorkflowStep',
        'StepResult',

        # Utils
        'Version',

        # Enums
        'PluginState',
        'PluginCapability',
        'PluginPriority',
        'PluginLifecycleEvent',
        'StepStatus',
        'ExecutionMode',

        # Core functions
        'version',
        'version_info',
        'test_function',
        'get_version',
        'create_plugin_manager',
        'create_plugin_loader',
        'create_plugin_registry',
        'create_plugin_dependency_resolver',
        'create_plugin_lifecycle_manager',

        # Communication functions
        'create_message_bus',

        # Manager functions
        'create_configuration_manager',
        'create_logging_manager',
        'create_resource_manager',

        # Orchestration functions
        'create_orchestrator',
        'create_workflow',
        'create_workflow_step',

        # Monitoring functions
        'create_hot_reload_manager',
        'create_metrics_collector',
        'setup_monitoring_system',

        # Transaction functions
        'create_transaction_manager',
        'create_transaction_operation',
        'create_transaction_context',
        'execute_atomic_operation',

        # Composition functions
        'create_composition_manager',
        'create_composition',
        'create_composition_binding',
        'create_pipeline_composition',
        'create_facade_composition',

        # Marketplace functions
        'create_marketplace',
        'create_search_filters',
        'search_free_plugins',
        'get_top_rated_plugins',

        # Threading functions
        'create_thread_pool',
        'create_thread_pool_manager',

        # Submodules
        'core',
        'utils',
        'communication',
        'security',
        'managers',
        'orchestration',
        'monitoring',
        'transactions',
        'composition',
        'marketplace',
        'threading',
    ]

    # Module-level convenience functions with type hints
    def create_plugin_manager() -> 'PluginManager':
        """
        Create a new PluginManager instance with default settings.

        Returns:
            PluginManager: A new plugin manager instance ready for use

        Example:
            >>> import qtforge
            >>> manager = qtforge.create_plugin_manager()
            >>> print(manager.loaded_plugins())
        """
        return PluginManager()

    def get_version() -> str:
        """
        Get the QtForge version string.

        Returns:
            str: Version string in format "major.minor.patch"
        """
        return _qtforge_module.get_version()

    def get_version_info() -> Tuple[int, int, int]:
        """
        Get the QtForge version as a tuple.

        Returns:
            Tuple[int, int, int]: Version tuple (major, minor, patch)
        """
        return __version_info__

    def get_build_info() -> Dict[str, Any]:
        """
        Get comprehensive build and system information.

        Returns:
            Dict[str, Any]: Build information including version, modules, and features
        """
        return _qtforge_module.get_build_info()

    def list_available_modules() -> List[str]:
        """
        List all available QtForge modules.

        Returns:
            List[str]: List of available module names
        """
        return _qtforge_module.list_available_modules()

    def test_connection() -> str:
        """
        Test the QtForge Python bindings connection.

        Returns:
            str: Test message confirming bindings are working
        """
        return _qtforge_module.test_connection()

    def get_help() -> str:
        """
        Get comprehensive help information for QtForge Python bindings.

        Returns:
            str: Detailed help text with usage examples
        """
        return _qtforge_module.get_help()

except ImportError as e:
    import sys
    import os

    # Provide helpful error message
    error_msg = f"""
Failed to import QtForge Python bindings: {e}

This could be due to:
1. QtForge Python bindings not properly installed
2. Missing Qt6 libraries
3. Incompatible Python version (requires Python 3.8+)
4. Missing pybind11 dependencies

Please ensure:
- QtForge is properly installed with Python bindings enabled
- Qt6 Core is available in your system
- You're using a supported Python version

Installation directory: {os.path.dirname(__file__)}
Python version: {sys.version}
"""

    raise ImportError(error_msg) from e
