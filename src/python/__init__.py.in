"""
QtForge Python Bindings

A modern, type-safe plugin system for Qt applications with Python integration.

This package provides Python bindings for the QtForge C++ library, enabling
Python applications to use QtForge's plugin management, communication, and
security features.

Version: @PROJECT_VERSION@
"""

__version__ = "@PROJECT_VERSION@"
__version_info__ = (@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@)

# Import the compiled extension module
try:
    from .qtforge import *
    from . import qtforge as _qtforge_module

    # Re-export commonly used classes and functions
    __all__ = [
        # Core classes
        'PluginManager',
        'IPlugin',
        'PluginLoader',
        'PluginRegistry',
        'PluginMetadata',

        # Communication
        'MessageBus',

        # Security
        'SecurityManager',

        # Managers
        'ConfigurationManager',

        # Orchestration
        'PluginOrchestrator',
        'Workflow',
        'WorkflowStep',
        'StepResult',

        # Utils
        'Version',

        # Enums
        'PluginState',
        'PluginCapability',
        'PluginPriority',
        'StepStatus',
        'ExecutionMode',

        # Core functions
        'version',
        'version_info',
        'test_function',
        'get_version',
        'create_plugin_manager',
        'create_plugin_loader',
        'create_plugin_registry',

        # Communication functions
        'create_message_bus',

        # Manager functions
        'create_configuration_manager',
        'create_logging_manager',
        'create_resource_manager',

        # Orchestration functions
        'create_orchestrator',
        'create_workflow',
        'create_workflow_step',

        # Monitoring functions
        'create_hot_reload_manager',
        'create_metrics_collector',
        'setup_monitoring_system',

        # Transaction functions
        'create_transaction_manager',
        'create_transaction_operation',
        'create_transaction_context',
        'execute_atomic_operation',

        # Composition functions
        'create_composition_manager',
        'create_composition',
        'create_composition_binding',
        'create_pipeline_composition',
        'create_facade_composition',

        # Marketplace functions
        'create_marketplace',
        'create_search_filters',
        'search_free_plugins',
        'get_top_rated_plugins',

        # Threading functions
        'create_thread_pool',
        'create_thread_pool_manager',

        # Submodules
        'core',
        'utils',
        'communication',
        'security',
        'managers',
        'orchestration',
        'monitoring',
        'transactions',
        'composition',
        'marketplace',
        'threading',
    ]

    # Module-level convenience functions
    def create_plugin_manager():
        """Create a new PluginManager instance with default settings."""
        return PluginManager()

    def get_version():
        """Get the QtForge version string."""
        return _qtforge_module.version()

    def get_version_info():
        """Get the QtForge version as a tuple (major, minor, patch)."""
        return _qtforge_module.version_info()

except ImportError as e:
    import sys
    import os

    # Provide helpful error message
    error_msg = f"""
Failed to import QtForge Python bindings: {e}

This could be due to:
1. QtForge Python bindings not properly installed
2. Missing Qt6 libraries
3. Incompatible Python version (requires Python 3.8+)
4. Missing pybind11 dependencies

Please ensure:
- QtForge is properly installed with Python bindings enabled
- Qt6 Core is available in your system
- You're using a supported Python version

Installation directory: {os.path.dirname(__file__)}
Python version: {sys.version}
"""

    raise ImportError(error_msg) from e
