"""
Type stubs for QtForge Python bindings
"""

from typing import Any, Dict, List, Optional, Tuple, Union, Callable
from enum import Enum
import datetime

# Version information
__version__: str
def get_version() -> str: ...
def get_build_info() -> Dict[str, Any]: ...
def get_system_info() -> Dict[str, Any]: ...
def list_available_modules() -> List[str]: ...
def test_connection() -> str: ...
def get_help() -> str: ...

# Core enums
class PluginState(Enum):
    Unloaded = 0
    Loading = 1
    Loaded = 2
    Initializing = 3
    Running = 4
    Paused = 5
    Stopping = 6
    Stopped = 7
    Error = 8
    Reloading = 9

class PluginCapability(Enum):
    None_ = 0
    UI = 1
    Service = 2
    Network = 3
    DataProcessing = 4
    Scripting = 5
    FileSystem = 6
    Database = 7
    AsyncInit = 8
    HotReload = 9
    Configuration = 10
    Logging = 11
    Security = 12
    Threading = 13
    Monitoring = 14

class PluginPriority(Enum):
    Lowest = 0
    Low = 1
    Normal = 2
    High = 3
    Highest = 4

# Core classes
class Version:
    def __init__(self, major: int = 0, minor: int = 0, patch: int = 0) -> None: ...
    def major(self) -> int: ...
    def minor(self) -> int: ...
    def patch(self) -> int: ...
    def to_string(self) -> str: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: 'Version') -> bool: ...
    def __le__(self, other: 'Version') -> bool: ...
    def __gt__(self, other: 'Version') -> bool: ...
    def __ge__(self, other: 'Version') -> bool: ...

class PluginMetadata:
    def __init__(self) -> None: ...
    name: str
    version: Version
    description: str
    author: str
    license: str
    dependencies: List[str]
    tags: List[str]
    def __repr__(self) -> str: ...

class PluginLoadOptions:
    def __init__(self) -> None: ...
    validate_signature: bool
    check_dependencies: bool
    initialize_immediately: bool
    enable_hot_reload: bool

class PluginInfo:
    def __init__(self) -> None: ...
    id: str
    metadata: PluginMetadata
    state: PluginState
    hot_reload_enabled: bool
    def to_json(self) -> str: ...
    def __repr__(self) -> str: ...

class IPlugin:
    def metadata(self) -> PluginMetadata: ...
    def initialize(self) -> bool: ...
    def state(self) -> PluginState: ...
    def capabilities(self) -> PluginCapability: ...
    def priority(self) -> PluginPriority: ...
    def is_initialized(self) -> bool: ...
    def __repr__(self) -> str: ...

class PluginManager:
    def __init__(self) -> None: ...
    def load_plugin(self, file_path: str, options: Optional[PluginLoadOptions] = None) -> Union[str, Any]: ...
    def unload_plugin(self, plugin_id: str, force: bool = False) -> bool: ...
    def reload_plugin(self, plugin_id: str, preserve_state: bool = True) -> bool: ...
    def get_plugin(self, plugin_id: str) -> Optional[IPlugin]: ...
    def loaded_plugins(self) -> List[str]: ...
    def plugins_with_capability(self, capability: PluginCapability) -> List[str]: ...
    def plugins_in_category(self, category: str) -> List[str]: ...
    def get_plugin_info(self, plugin_id: str) -> Optional[PluginInfo]: ...
    def all_plugin_info(self) -> List[PluginInfo]: ...
    def discover_plugins(self, directory: str, recursive: bool = False) -> List[str]: ...
    def add_search_path(self, path: str) -> None: ...
    def remove_search_path(self, path: str) -> None: ...
    def search_paths(self) -> List[str]: ...
    def load_all_plugins(self, options: Optional[PluginLoadOptions] = None) -> Dict[str, bool]: ...

# Convenience functions
def create_version(major: int, minor: int, patch: int) -> Version: ...
def create_metadata(name: str, description: str) -> PluginMetadata: ...
def create_plugin_manager() -> PluginManager: ...
def get_system_status() -> Dict[str, Any]: ...

# Submodules
class core:
    # Core module contents
    ...

class utils:
    # Utils module contents
    ...

class communication:
    # Communication module contents
    ...

class security:
    # Security module contents
    ...

class managers:
    # Managers module contents
    ...

class orchestration:
    # Orchestration module contents
    ...

class monitoring:
    # Monitoring module contents
    ...

class threading:
    # Threading module contents
    ...

class transactions:
    # Transactions module contents
    ...

class composition:
    # Composition module contents
    ...

class marketplace:
    # Marketplace module contents
    ...
