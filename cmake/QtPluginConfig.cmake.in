# QtForgeConfig.cmake.in - CMake package configuration file

@PACKAGE_INIT@

# QtForge library configuration
set(QTFORGE_VERSION "@PROJECT_VERSION@")
set(QTFORGE_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set(QTFORGE_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set(QTFORGE_VERSION_PATCH "@PROJECT_VERSION_PATCH@")

# Component availability (all enabled by default in v3.2.0)
set(QTFORGE_NETWORK_FOUND @QTFORGE_BUILD_NETWORK@)
set(QTFORGE_UI_FOUND @QTFORGE_BUILD_UI@)
set(QTFORGE_SECURITY_FOUND @QTFORGE_BUILD_SECURITY@)
set(QTFORGE_SCRIPTING_FOUND @QTFORGE_BUILD_SCRIPTING@)
set(QTFORGE_PLATFORM_FOUND @QTFORGE_BUILD_PLATFORM@)
set(QTFORGE_WORKFLOW_FOUND @QTFORGE_BUILD_WORKFLOW@)
set(QTFORGE_BRIDGES_FOUND @QTFORGE_BUILD_BRIDGES@)
set(QTFORGE_THREADING_FOUND @QTFORGE_BUILD_THREADING@)
set(QTFORGE_REMOTE_FOUND @QTFORGE_BUILD_REMOTE_PLUGINS@)
set(QTFORGE_COMPONENTS_FOUND TRUE)  # Component architecture always available

# Backward compatibility with deprecation warnings
if(NOT DEFINED QTPLUGIN_VERSION)
    set(QTPLUGIN_VERSION "${QTFORGE_VERSION}")
    message(DEPRECATION "QTPLUGIN_VERSION is deprecated, use QTFORGE_VERSION instead")
endif()
if(NOT DEFINED QTPLUGIN_VERSION_MAJOR)
    set(QTPLUGIN_VERSION_MAJOR "${QTFORGE_VERSION_MAJOR}")
    message(DEPRECATION "QTPLUGIN_VERSION_MAJOR is deprecated, use QTFORGE_VERSION_MAJOR instead")
endif()
if(NOT DEFINED QTPLUGIN_VERSION_MINOR)
    set(QTPLUGIN_VERSION_MINOR "${QTFORGE_VERSION_MINOR}")
    message(DEPRECATION "QTPLUGIN_VERSION_MINOR is deprecated, use QTFORGE_VERSION_MINOR instead")
endif()
if(NOT DEFINED QTPLUGIN_VERSION_PATCH)
    set(QTPLUGIN_VERSION_PATCH "${QTFORGE_VERSION_PATCH}")
    message(DEPRECATION "QTPLUGIN_VERSION_PATCH is deprecated, use QTFORGE_VERSION_PATCH instead")
endif()
if(NOT DEFINED QTPLUGIN_NETWORK_FOUND)
    set(QTPLUGIN_NETWORK_FOUND "${QTFORGE_NETWORK_FOUND}")
    message(DEPRECATION "QTPLUGIN_NETWORK_FOUND is deprecated, use QTFORGE_NETWORK_FOUND instead")
endif()
if(NOT DEFINED QTPLUGIN_UI_FOUND)
    set(QTPLUGIN_UI_FOUND "${QTFORGE_UI_FOUND}")
    message(DEPRECATION "QTPLUGIN_UI_FOUND is deprecated, use QTFORGE_UI_FOUND instead")
endif()
if(NOT DEFINED QTPLUGIN_SECURITY_FOUND)
    set(QTPLUGIN_SECURITY_FOUND "${QTFORGE_SECURITY_FOUND}")
    message(DEPRECATION "QTPLUGIN_SECURITY_FOUND is deprecated, use QTFORGE_SECURITY_FOUND instead")
endif()
if(NOT DEFINED QTPLUGIN_COMPONENTS_FOUND)
    set(QTPLUGIN_COMPONENTS_FOUND "${QTFORGE_COMPONENTS_FOUND}")
    message(DEPRECATION "QTPLUGIN_COMPONENTS_FOUND is deprecated, use QTFORGE_COMPONENTS_FOUND instead")
endif()

# Find Qt6 dependencies
find_dependency(Qt6 REQUIRED COMPONENTS Core)

if(QTFORGE_NETWORK_FOUND)
    find_dependency(Qt6 REQUIRED COMPONENTS Network)
endif()

if(QTFORGE_UI_FOUND)
    find_dependency(Qt6 REQUIRED COMPONENTS Widgets)
endif()

# Include target files
include("${CMAKE_CURRENT_LIST_DIR}/QtForgeTargets.cmake")

# Security targets removed

# Handle components (all available by default in v3.2.0)
set(QtForge_FOUND TRUE)
set(QtForge_Core_FOUND TRUE)
set(QtForge_Security_FOUND ${QTFORGE_SECURITY_FOUND})
set(QtForge_Network_FOUND ${QTFORGE_NETWORK_FOUND})
set(QtForge_UI_FOUND ${QTFORGE_UI_FOUND})
set(QtForge_Scripting_FOUND ${QTFORGE_SCRIPTING_FOUND})
set(QtForge_Platform_FOUND ${QTFORGE_PLATFORM_FOUND})
set(QtForge_Workflow_FOUND ${QTFORGE_WORKFLOW_FOUND})
set(QtForge_Bridges_FOUND ${QTFORGE_BRIDGES_FOUND})
set(QtForge_Threading_FOUND ${QTFORGE_THREADING_FOUND})
set(QtForge_Remote_FOUND ${QTFORGE_REMOTE_FOUND})

# Backward compatibility for component found variables
set(QtPlugin_FOUND TRUE)
set(QtPlugin_Core_FOUND TRUE)
set(QtPlugin_Security_FOUND ${QTFORGE_SECURITY_FOUND})
set(QtPlugin_Network_FOUND ${QTFORGE_NETWORK_FOUND})
set(QtPlugin_UI_FOUND ${QTFORGE_UI_FOUND})
set(QtPlugin_Scripting_FOUND ${QTFORGE_SCRIPTING_FOUND})
set(QtPlugin_Platform_FOUND ${QTFORGE_PLATFORM_FOUND})
set(QtPlugin_Workflow_FOUND ${QTFORGE_WORKFLOW_FOUND})
set(QtPlugin_Bridges_FOUND ${QTFORGE_BRIDGES_FOUND})
set(QtPlugin_Threading_FOUND ${QTFORGE_THREADING_FOUND})
set(QtPlugin_Remote_FOUND ${QTFORGE_REMOTE_FOUND})

# Check requested components
if(QtPlugin_FIND_COMPONENTS)
    foreach(component ${QtPlugin_FIND_COMPONENTS})
        if(NOT QtPlugin_${component}_FOUND)
            if(QtPlugin_FIND_REQUIRED_${component})
                message(FATAL_ERROR "QtPlugin component ${component} not found")
            else()
                message(WARNING "QtPlugin component ${component} not found")
                set(QtPlugin_FOUND FALSE)
            endif()
        endif()
    endforeach()
endif()

# Provide information about what was found
if(QtForge_FOUND)
    message(STATUS "Found QtForge ${QTFORGE_VERSION} (all features enabled by default)")
    message(STATUS "  Core: YES")
    message(STATUS "  Security: ${QtForge_Security_FOUND}")
    message(STATUS "  Network: ${QtForge_Network_FOUND}")
    message(STATUS "  UI: ${QtForge_UI_FOUND}")
    message(STATUS "  Scripting: ${QtForge_Scripting_FOUND}")
    message(STATUS "  Platform: ${QtForge_Platform_FOUND}")
    message(STATUS "  Workflow: ${QtForge_Workflow_FOUND}")
    message(STATUS "  Bridges: ${QtForge_Bridges_FOUND}")
    message(STATUS "  Threading: ${QtForge_Threading_FOUND}")
    message(STATUS "  Remote: ${QtForge_Remote_FOUND}")
    message(STATUS "  Components: YES (modular architecture)")
endif()

# Helper function to create plugins
function(qtforge_add_plugin target)
    cmake_parse_arguments(PLUGIN
        ""
        "TYPE;OUTPUT_NAME;INSTALL_DIR"
        "SOURCES;HEADERS;METADATA;DEPENDENCIES"
        ${ARGN}
    )

    if(NOT PLUGIN_TYPE)
        set(PLUGIN_TYPE "generic")
    endif()

    if(NOT PLUGIN_OUTPUT_NAME)
        set(PLUGIN_OUTPUT_NAME ${target})
    endif()

    if(NOT PLUGIN_INSTALL_DIR)
        set(PLUGIN_INSTALL_DIR "plugins")
    endif()

    # Create the plugin library
    add_library(${target} MODULE ${PLUGIN_SOURCES} ${PLUGIN_HEADERS})

    # Set properties
    set_target_properties(${target} PROPERTIES
        OUTPUT_NAME ${PLUGIN_OUTPUT_NAME}
        PREFIX ""
        SUFFIX ".qtplugin"
        AUTOMOC ON
    )

    # Link QtForge core
    target_link_libraries(${target} PRIVATE QtForge::Core)

    # Link additional dependencies
    if(PLUGIN_DEPENDENCIES)
        target_link_libraries(${target} PRIVATE ${PLUGIN_DEPENDENCIES})
    endif()

    # Install plugin
    install(TARGETS ${target}
        LIBRARY DESTINATION ${PLUGIN_INSTALL_DIR}
        RUNTIME DESTINATION ${PLUGIN_INSTALL_DIR}
    )

    # Install metadata if provided
    if(PLUGIN_METADATA)
        install(FILES ${PLUGIN_METADATA}
            DESTINATION ${PLUGIN_INSTALL_DIR}
        )
    endif()
endfunction()

# Backward compatibility function
function(qtplugin_add_plugin target)
    message(DEPRECATION "qtplugin_add_plugin is deprecated, use qtforge_add_plugin instead")
    qtforge_add_plugin(${target} ${ARGN})
endfunction()

# Helper function to find plugins
function(qtforge_find_plugins output_var directory)
    file(GLOB_RECURSE plugin_files
        "${directory}/*.qtplugin"
        "${directory}/*.so"
        "${directory}/*.dll"
        "${directory}/*.dylib"
    )
    set(${output_var} ${plugin_files} PARENT_SCOPE)
endfunction()

# Backward compatibility function
function(qtplugin_find_plugins output_var directory)
    message(DEPRECATION "qtplugin_find_plugins is deprecated, use qtforge_find_plugins instead")
    qtforge_find_plugins(${output_var} ${directory})
endfunction()

check_required_components(QtPlugin)
