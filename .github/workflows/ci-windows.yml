name: 'Windows CI'

on:
  push:
    branches: [main, develop, project-organization]
    tags: ["v*"]
  pull_request:
    branches: [main, develop, project-organization]
  schedule:
    # Run nightly builds to catch dependency issues
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
      build_type:
        description: 'Build type to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - release-only
        - debug-only

# Set default permissions to read-only for security
permissions:
  contents: read

env:
  QT_VERSION: "6.5.3"
  CMAKE_VERSION: "3.27.7"
  # Build performance optimizations
  CCACHE_COMPRESS: "1"
  CCACHE_COMPRESSLEVEL: "6"
  CCACHE_MAXSIZE: "2G"

jobs:
  # Check what files changed to determine which jobs to run
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      core: ${{ steps.detect.outputs.core }}
      cmake: ${{ steps.detect.outputs.cmake }}
      scripts: ${{ steps.detect.outputs.scripts }}
      ci: ${{ steps.detect.outputs.ci }}
      workflows: ${{ steps.detect.outputs.workflows }}
      dependencies: ${{ steps.detect.outputs.dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        id: detect
        uses: ./.github/workflows/shared/detect-changes

  # Windows Build and Test
  build-and-test:
    name: 'Windows Build & Test (${{ matrix.compiler }}-${{ matrix.build_type }})'
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.cmake == 'true' || needs.changes.outputs.scripts == 'true' || needs.changes.outputs.ci == 'true' || needs.changes.outputs.workflows == 'true' || needs.changes.outputs.dependencies == 'true' }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          # MSVC builds
          - os: windows-latest
            compiler: msvc
            qt_arch: win64_msvc2022_64
            cmake_preset: windows-msvc
            build_type: Release
            parallel_jobs: 4
            enable_lto: true
          - os: windows-latest
            compiler: msvc
            qt_arch: win64_msvc2022_64
            cmake_preset: windows-msvc
            build_type: Debug
            parallel_jobs: 2
            enable_lto: false
          # MinGW64 builds
          - os: windows-latest
            compiler: mingw64
            qt_arch: win64_mingw
            cmake_preset: windows-mingw64
            build_type: Release
            parallel_jobs: 4
            enable_lto: false
          - os: windows-latest
            compiler: mingw64
            qt_arch: win64_mingw
            cmake_preset: windows-mingw64
            build_type: Debug
            parallel_jobs: 2
            enable_lto: false

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Qt
        uses: ./.github/workflows/shared/setup-qt
        with:
          qt-version: ${{ env.QT_VERSION }}
          qt-arch: ${{ matrix.qt_arch }}
          cache-key-suffix: ${{ matrix.compiler }}

      - name: Setup Build Environment
        uses: ./.github/workflows/shared/setup-build-env
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}
          enable-ccache: 'true'
          ccache-key-suffix: ${{ matrix.compiler }}
          build-type: ${{ matrix.build_type }}
          compiler: ${{ matrix.compiler }}

      - name: Cache Dependencies
        uses: ./.github/workflows/shared/cache-dependencies
        with:
          cache-key-suffix: ${{ matrix.compiler }}
          build-type: ${{ matrix.build_type }}
          compiler: ${{ matrix.compiler }}

      - name: Install Platform Dependencies
        uses: ./.github/workflows/shared/install-platform-deps
        with:
          install-dev-tools: ${{ matrix.compiler == 'mingw64' && 'true' || 'false' }}
          install-packaging-tools: 'true'

      - name: Setup MinGW64 (if needed)
        if: matrix.compiler == 'mingw64'
        shell: pwsh
        run: |
          # Install MSYS2 and MinGW64 toolchain
          choco install msys2 -y
          $env:PATH = "C:\tools\msys64\mingw64\bin;C:\tools\msys64\usr\bin;" + $env:PATH
          
          # Update MSYS2 and install MinGW64 toolchain
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja"
          
          # Add to PATH for subsequent steps
          echo "C:\tools\msys64\mingw64\bin" >> $env:GITHUB_PATH
          echo "C:\tools\msys64\usr\bin" >> $env:GITHUB_PATH

      - name: Build and Test
        uses: ./.github/workflows/shared/build-and-test
        with:
          build-type: ${{ matrix.build_type }}
          cmake-preset: ${{ matrix.cmake_preset }}
          parallel-jobs: ${{ matrix.parallel_jobs }}
          skip-tests: ${{ github.event.inputs.skip_tests }}
          enable-lto: ${{ matrix.enable_lto }}
          additional-cmake-args: ${{ matrix.compiler == 'msvc' && '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL' || '' }}

      - name: Performance Monitor
        uses: ./.github/workflows/shared/performance-monitor
        with:
          build-time: ${{ env.BUILD_TIME }}
          test-time: ${{ env.TEST_TIME }}
          platform: 'Windows'
          build-type: ${{ matrix.build_type }}
          compiler: ${{ matrix.compiler }}

      - name: Upload Artifacts
        uses: ./.github/workflows/shared/upload-artifacts
        with:
          artifact-name-prefix: 'qtforge-windows-${{ matrix.compiler }}'

  # Windows Packaging (only on tags or main branch)
  package:
    name: 'Windows Packaging (${{ matrix.package_type }})'
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        include:
          - package_type: NSIS
            os: windows-latest
          - package_type: WIX
            os: windows-latest
          - package_type: ZIP
            os: windows-latest

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Qt
        uses: ./.github/workflows/shared/setup-qt
        with:
          qt-version: ${{ env.QT_VERSION }}
          qt-arch: win64_msvc2022_64

      - name: Setup Build Environment
        uses: ./.github/workflows/shared/setup-build-env
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Install Platform Dependencies
        uses: ./.github/workflows/shared/install-platform-deps
        with:
          install-packaging-tools: 'true'

      - name: Configure for packaging
        shell: pwsh
        run: |
          cmake -S . -B build-pkg `
            -DCMAKE_BUILD_TYPE=Release `
            -DQTFORGE_BUILD_EXAMPLES=ON `
            -DQTFORGE_BUILD_TESTS=OFF `
            -DQTFORGE_BUILD_NETWORK=ON `
            -DQTFORGE_BUILD_UI=ON `
            -DQTFORGE_CREATE_PACKAGES=ON `
            -DCPACK_GENERATOR="${{ matrix.package_type }}" `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL

      - name: Build for packaging
        shell: pwsh
        run: cmake --build build-pkg --config Release --parallel

      - name: Create packages
        shell: pwsh
        run: |
          cd build-pkg
          cpack --config CPackConfig.cmake --verbose

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: qtforge-windows-${{ matrix.package_type }}-${{ github.run_number }}
          path: build-pkg/packages/
          retention-days: 90
