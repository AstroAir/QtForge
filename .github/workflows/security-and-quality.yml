name: Security and Quality Checks

on:
  push:
    branches: [main, develop, project-organization]
  pull_request:
    branches: [main, develop, project-organization]
  schedule:
    # Run security scans weekly
    - cron: "0 6 * * 1"
  workflow_call:
    inputs:
      platform:
        description: "Platform to run quality checks for"
        required: false
        default: "all"
        type: string
      skip_security_scan:
        description: "Skip security scanning"
        required: false
        default: false
        type: boolean

# Set default permissions to read-only for security
permissions:
  contents: read

env:
  QT_VERSION: "6.5.3"
  CMAKE_VERSION: "3.27.7"

jobs:
  # Check what files changed to determine which jobs to run
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      core: ${{ steps.detect.outputs.core }}
      cmake: ${{ steps.detect.outputs.cmake }}
      ci: ${{ steps.detect.outputs.ci }}
      workflows: ${{ steps.detect.outputs.workflows }}
      dependencies: ${{ steps.detect.outputs.dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        id: detect
        uses: ./.github/workflows/shared/detect-changes

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    needs: changes
    if: ${{ !inputs.skip_security_scan && (needs.changes.outputs.dependencies == 'true' || needs.changes.outputs.core == 'true' || github.event_name == 'schedule') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # CodeQL security analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    needs: changes
    if: ${{ !inputs.skip_security_scan && (needs.changes.outputs.core == 'true' || github.event_name == 'schedule') }}
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["cpp"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Qt
        uses: ./.github/workflows/shared/setup-qt
        with:
          qt-version: ${{ env.QT_VERSION }}
          qt-arch: gcc_64

      - name: Setup Build Environment
        uses: ./.github/workflows/shared/setup-build-env
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Configure and build
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DQTFORGE_BUILD_TESTS=OFF \
            -DQTFORGE_BUILD_EXAMPLES=OFF
          cmake --build build --parallel

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # License compliance check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: FOSSA Scan
        uses: fossas/fossa-action@v1.3.3
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      - name: FOSSA Test
        uses: fossas/fossa-action@v1.3.3
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true

  # Documentation quality check
  docs-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install documentation tools
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
          if [ -f "docs/requirements.txt" ]; then
            pip install -r docs/requirements.txt
          fi

      - name: Check documentation links
        run: |
          # Install markdown-link-check
          npm install -g markdown-link-check

          # Check all markdown files for broken links
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | \
            xargs markdown-link-check --config .github/markdown-link-check.json || true

      - name: Build documentation
        run: |
          cd docs
          mkdocs build --strict

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: docs/site/
          retention-days: 30

  # Performance benchmarking
  performance-benchmark:
    name: Performance Benchmarking
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Qt
        uses: ./.github/workflows/shared/setup-qt
        with:
          qt-version: ${{ env.QT_VERSION }}
          qt-arch: gcc_64

      - name: Setup Build Environment
        uses: ./.github/workflows/shared/setup-build-env
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Build with benchmarks
        run: |
          cmake -S . -B build-bench \
            -DCMAKE_BUILD_TYPE=Release \
            -DQTFORGE_BUILD_BENCHMARKS=ON \
            -DQTFORGE_BUILD_TESTS=OFF
          cmake --build build-bench --parallel

      - name: Run benchmarks
        run: |
          cd build-bench
          # Run performance benchmarks and save results
          if [ -f "./benchmarks/qtforge_benchmarks" ]; then
            ./benchmarks/qtforge_benchmarks --benchmark_format=json > benchmark_results.json
          else
            echo "Benchmark executable not found, creating placeholder results"
            echo '{"benchmarks": [], "context": {"date": "'$(date)'", "host_name": "'$(hostname)'"}}' > benchmark_results.json
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: build-bench/benchmark_results.json
          retention-days: 90

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t qtforge:latest .
          else
            echo "No Dockerfile found, skipping container scan"
            exit 0
          fi

      - name: Run Trivy container scan
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "qtforge:latest"
          format: "sarif"
          output: "trivy-container-results.sarif"

      - name: Upload container scan results
        if: hashFiles('Dockerfile') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-container-results.sarif"

  # Supply chain security
  supply-chain-security:
    name: Supply Chain Security
    needs: changes
    if: ${{ !inputs.skip_security_scan && (needs.changes.outputs.dependencies == 'true' || github.event_name == 'schedule') }}
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Scorecard analysis
        uses: ossf/scorecard-action@v2.4.2
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.SCORECARD_TOKEN || secrets.GITHUB_TOKEN }}
          publish_results: true

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
