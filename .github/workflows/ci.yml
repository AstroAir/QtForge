name: CI - Build, Test, and Package QtForge

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build qt6-base-dev qt6-tools-dev rpm
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DQTPLUGIN_BUILD_TESTS=ON || \
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DQTFORGE_BUILD_TESTS=ON
      - name: Build
        run: cmake --build build --parallel
      - name: "Smoke: install and consume"
        run: |
          python3 tests/smoke/test_install_and_consume.py
      - name: CTest
        run: ctest --test-dir build --output-on-failure
      - name: Package (DEB, TGZ, ZIP)
        run: |
          python3 scripts/optimize-packaging.py --build-dir build --output-dir packages --package-types DEB TGZ ZIP --optimize-binaries
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qtforge-${{ runner.os }}-${{ github.sha }}
          path: packages/*

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (brew)
        run: |
          brew update
          brew install cmake ninja qt@6
      - name: Configure
        env:
          CMAKE_PREFIX_PATH: $(brew --prefix qt@6)/lib/cmake
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DQTFORGE_BUILD_TESTS=ON
      - name: Build
        run: cmake --build build --parallel
      - name: CTest
        run: ctest --test-dir build --output-on-failure
      - name: "Smoke: install and consume"
        run: |
          python3 tests/smoke/test_install_and_consume.py
      - name: Package (TGZ, ZIP, DMG)
        run: |
          python3 scripts/optimize-packaging.py --build-dir build --output-dir packages --package-types TGZ ZIP DragNDrop --optimize-binaries --deploy-examples
      - name: "Optional: macOS codesign (if secrets provided)"
        if: ${{ secrets.APPLE_ID && secrets.APPLE_TEAM_ID && secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "Signing artifacts (placeholder; requires codesign identity and entitlements)"
          # Example: codesign --deep --force --options runtime --sign "$MACOS_IDENTITY" path/to/.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qtforge-${{ runner.os }}-${{ github.sha }}
          path: packages/*

  windows-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Ninja, WiX, NSIS
        run: |
          choco install ninja -y
          choco install wixtoolset -y
          choco install nsis -y
      - name: Install Qt 6 (msvc) via install-qt-action
        uses: jurplel/install-qt-action@v4
        with:
          version: "6.6.3"
          host: "windows"
          target: "desktop"
          arch: "win64_msvc2019_64"
      - name: Configure
        env:
          CMAKE_GENERATOR: Ninja
          CMAKE_PREFIX_PATH: ${{ env.Qt6_DIR }}
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DQTFORGE_BUILD_TESTS=ON
      - name: Build
        run: cmake --build build --parallel
      - name: CTest
        run: ctest --test-dir build --output-on-failure
      - name: "Smoke: install and consume"
        shell: pwsh
        run: |
          py -3 tests/smoke/test_install_and_consume.py
      - name: Package (ZIP)
        shell: pwsh
        run: |
          py -3 scripts/optimize-packaging.py --build-dir build --output-dir packages --package-types ZIP --deploy-examples
      - name: Package (NSIS, WIX) [optional]
        continue-on-error: true
        shell: pwsh
        run: |
          py -3 scripts/optimize-packaging.py --build-dir build --output-dir packages --package-types NSIS WIX --deploy-examples
      - name: "Optional: Windows code signing (if secrets provided)"
        if: ${{ secrets.WINDOWS_CERT_PFX && secrets.WINDOWS_CERT_PASSWORD }}
        shell: pwsh
        run: |
          echo "Signing artifacts (placeholder; requires PFX cert and password)"
          # Example: signtool sign /f $Env:WINDOWS_CERT_PFX /p $Env:WINDOWS_CERT_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 path\to\installer.msi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qtforge-windows-msvc-${{ github.sha }}
          path: packages/*

  windows-msys2:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-tools
      - name: Configure
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DQTFORGE_BUILD_TESTS=ON
      - name: Build
        run: cmake --build build --parallel
      - name: CTest
        run: ctest --test-dir build --output-on-failure
      - name: "Smoke: install and consume"
        run: |
          python3 tests/smoke/test_install_and_consume.py
      - name: Package (ZIP)
        run: |
          python3 scripts/optimize-packaging.py --build-dir build --output-dir packages --package-types ZIP
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qtforge-windows-msys2-${{ github.sha }}
          path: packages/*
