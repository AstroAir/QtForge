{
  "name": "Service Example Plugin",
  "description": "A comprehensive service plugin demonstrating background processing and MessageBus integration",
  "version": "1.0.0",
  "author": "QtPlugin Development Team",
  "id": "com.example.service_plugin",
  "category": "Service",
  "license": "MIT",
  "homepage": "https://github.com/example/qtplugin",
  "uuid": "12345678-1234-5678-9abc-123456789012",
  "capabilities": [
    "Service",
    "Configuration",
    "Logging",
    "Monitoring",
    "Threading",
    "AsyncInit"
  ],
  "priority": "High",
  "dependencies": {
    "required": ["qtplugin.MessageBus"],
    "optional": [
      "qtplugin.ConfigurationManager",
      "qtplugin.PluginServiceDiscovery"
    ]
  },
  "configuration": {
    "processing_interval": {
      "type": "integer",
      "default": 5000,
      "min": 1000,
      "max": 300000,
      "description": "Processing timer interval in milliseconds"
    },
    "heartbeat_interval": {
      "type": "integer",
      "default": 30000,
      "min": 5000,
      "max": 600000,
      "description": "Heartbeat timer interval in milliseconds"
    },
    "logging_enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable/disable logging"
    },
    "service_name": {
      "type": "string",
      "default": "ExampleService",
      "maxLength": 100,
      "description": "Name of the service"
    },
    "max_concurrent_tasks": {
      "type": "integer",
      "default": 10,
      "min": 1,
      "max": 100,
      "description": "Maximum number of concurrent tasks"
    },
    "auto_register_service": {
      "type": "boolean",
      "default": true,
      "description": "Automatically register service on initialization"
    },
    "message_bus_enabled": {
      "type": "boolean",
      "default": true,
      "description": "Enable MessageBus integration"
    }
  },
  "commands": [
    {
      "name": "status",
      "description": "Get plugin status and basic information",
      "parameters": {}
    },
    {
      "name": "service",
      "description": "Service management operations",
      "parameters": {
        "action": {
          "type": "string",
          "enum": ["register", "unregister", "info"],
          "description": "Service action to perform"
        }
      }
    },
    {
      "name": "task",
      "description": "Task management operations",
      "parameters": {
        "action": {
          "type": "string",
          "enum": ["submit", "stats"],
          "description": "Task action to perform"
        },
        "task": {
          "type": "object",
          "description": "Task data (required for submit action)"
        }
      }
    },
    {
      "name": "message",
      "description": "Message bus operations",
      "parameters": {
        "action": {
          "type": "string",
          "enum": ["publish", "stats"],
          "description": "Message action to perform"
        },
        "status": {
          "type": "string",
          "description": "Status message to publish"
        },
        "data": {
          "type": "object",
          "description": "Additional data to include"
        }
      }
    },
    {
      "name": "monitoring",
      "description": "Get monitoring data",
      "parameters": {
        "type": {
          "type": "string",
          "enum": ["performance", "resources", "service", "all"],
          "default": "all",
          "description": "Type of monitoring data to retrieve"
        }
      }
    }
  ],
  "services": {
    "ExampleService": {
      "description": "Background processing service with MessageBus integration",
      "version": "1.0.0",
      "endpoints": {
        "status": "/service/status",
        "submit_task": "/service/task",
        "metrics": "/service/metrics"
      },
      "message_types": ["ServiceStatus", "ServiceRequest"]
    }
  },
  "threading": {
    "thread_safe": true,
    "thread_model": "multi-threaded",
    "worker_threads": 1
  },
  "resources": {
    "estimated_memory_kb": 1024,
    "estimated_cpu_percent": 1.0,
    "requires_network": false,
    "requires_filesystem": false
  },
  "examples": {
    "basic_usage": "auto plugin = ServicePluginFactory::create_plugin(); plugin->initialize();",
    "task_submission": "plugin->execute_command(\"task\", {{\"action\", \"submit\"}, {\"task\", task_data}});",
    "service_registration": "plugin->execute_command(\"service\", {{\"action\", \"register\"}});",
    "monitoring": "plugin->execute_command(\"monitoring\", {{\"type\", \"all\"}});"
  }
}
